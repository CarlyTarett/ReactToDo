{"version":3,"sources":["logo.svg","Header.js","InputTask.js","TaskCount.js","Task.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","React","Component","InputTask","state","description","status","dateAdded","dueDate","updateName","event","setState","target","value","updateDue","inputTask","props","inputTaskFunc","className","type","onChange","this","onClick","TaskCount","number","Task","handleDelete","deleteTaskFunc","id","handleDone","markTaskDoneFunc","text","App","tasks","inputNewTask","newTask","date_added","moment","format","slice","due_date","axios","post","then","response","newReturnedTask","data","copyOfTasks","push","catch","err","console","log","deleteTask","delete","filteredTasks","filter","task","markDone","put","map","get","liveTasks","completedTasks","style","height","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af862f9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\n\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n\n      <div>\n\n        <h1>To Do List</h1>\n\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from \"react\";\n\nimport \"./InputTask.css\";\n\n\nclass InputTask extends React.Component {\n  state = {\n    description: \"\",\n    status: \"\",\n    dateAdded: \"2019-12-09\",\n    dueDate: \"2020-05-11\"\n  }\n\n  updateName = (event) => {\n    this.setState({\n      description: event.target.value\n    });\n  }\n\n\n  updateDue = (event) => {\n    this.setState({\n      dueDate: event.target.value\n    });\n  }\n\n  inputTask = () => {\n\n    this.props.inputTaskFunc(\n      this.state.description,\n      this.state.dueDate\n    );\n\n  };\n\n  render() {\n    return (\n\n      <div className=\"row myInput\">\n        <div className=\"col-6\">\n\n          <input type=\"text\"\n            onChange={this.updateName}\n            value={this.state.description}\n            className=\"form-control\" />\n\n        </div>\n\n        <div className=\"col-4\">\n\n          <input type=\"date\"\n            onChange={this.updateDue}\n            value={this.state.dueDate}\n            className=\"form-control\" />\n\n        </div>\n\n        <div className=\"col-2\">\n\n\n          <button className=\"btn btn-primary\" onClick={this.inputTask}>\n            Add\n          </button>\n\n        </div>\n\n\n      </div>\n\n\n\n\n\n    );\n  }\n}\n\nexport default InputTask;","import React from \"react\";\n\nimport \"./TaskCount.css\";\n\n\nclass TaskCount extends React.Component {\n  render() {\n    return (\n\n      <p className=\"tc\">Things to do: {this.props.number} </p>\n    );\n  }\n}\n\nexport default TaskCount;","import React from \"react\";\n\nclass Task extends React.Component {\n\n  handleDelete = () => {\n    this.props.deleteTaskFunc(this.props.id);\n  }\n\n  handleDone = () => {\n    this.props.markTaskDoneFunc(this.props.id);\n  }\n  render() {\n    return (\n\n\n      <div className=\"row\">\n        <div className=\"col-5 col-sm-5\">\n          <p>{this.props.text}</p>\n        </div>\n        <div className=\"col-3 col-sm-3\">\n          <p>{this.props.dueDate}</p>\n        </div>\n        <div className=\"col-2 col-sm-2\">\n\n\n          {this.props.status === \"live\" ? (\n            <button className=\"btn btn-primary book-button\" onClick={this.handleDone}>Done</button>\n          ) : (\n              <p></p>\n\n            )}\n\n          {/* <button className=\"btn btn-primary\">Done</button> */}\n        </div>\n        <div className=\"col-2 col-sm-2\">\n          <button className=\"btn btn-danger\" onClick={this.handleDelete}>\n            Delete\n          </button>\n        </div>\n\n\n      </div>\n\n\n\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react';\nimport logo from './logo.svg';\nimport uuid from \"uuid/v4\";\nimport Header from './Header.js';\nimport InputTask from './InputTask.js';\nimport TaskCount from './TaskCount.js';\nimport Task from './Task.js';\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    tasks: []\n  };\n\n  // special built in method runs whenever mounts\n  componentDidMount() {\n    //fetch the tasks making a GET request\n    axios.get(\" https://ma5s5cp7sc.execute-api.eu-west-1.amazonaws.com/dev/tasks\")\n      .then((response) => {\n        const tasks = response.data.tasks;\n        this.setState({\n          tasks: tasks\n        })\n        console.log(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    // then set them as the state \n  }\n\n  inputNewTask = (description, dueDate) => {\n    // put the first ones to match the database as it's what's sent\n    // after the : it's parameters from the functions in this code\n    const newTask = {\n      description: description,\n      status: \"live\",\n      date_added: moment().format().slice(0, 10),\n      due_date: dueDate\n    };\n\n    axios.post(\" https://ma5s5cp7sc.execute-api.eu-west-1.amazonaws.com/dev/tasks\", newTask)\n      .then((response) => {\n\n        const newReturnedTask = response.data;\n        const copyOfTasks = this.state.tasks.slice();\n        copyOfTasks.push(newReturnedTask);\n\n        this.setState({\n          tasks: copyOfTasks\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // deleteTask = id => {\n\n  //   const filteredTasks = this.state.tasks.map(task => {\n\n  //     if (task.id !== id)\n  //       return task;\n  //     else\n  //       task.status = \"deleted\"\n  //     return task;\n  //   });\n  //   console.log(filteredTasks);\n  //   this.setState({\n  //     tasks: filteredTasks\n  //   });\n  // };\n\n  deleteTask = id => {\n    axios.delete(`https://ma5s5cp7sc.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`)\n      .then(() => {\n        const filteredTasks = this.state.tasks.filter(task => {\n          if (task.id === id) return false;\n          else return true;\n        });\n\n        this.setState({\n          tasks: filteredTasks\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n\n\n  //   const filteredTasks = this.state.tasks.map(task => {\n\n  //     if (task.id !== id)\n  //       return task;\n  //     else\n  //       task.status = \"deleted\"\n  //     return task;\n  //   });\n  //   console.log(filteredTasks);\n  //   this.setState({\n  //     tasks: filteredTasks\n  //   });\n  // };\n\n  markDone = id => {\n\n    axios.put(`https://ma5s5cp7sc.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`, {\n      status: \"completed\"\n    })\n      .then(() => {\n\n    \n\n        const filteredTasks = this.state.tasks.map(task => {\n\n          if (task.id === id)\n            task.status = \"completed\";\n\n          return task;\n        });\n\n        console.log(filteredTasks);\n\n        this.setState({\n          tasks: filteredTasks\n        })\n      })\n\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n\n    render() {\n      const liveTasks = this.state.tasks.filter(task => {\n        return task.status === \"live\";\n      });\n\n      const completedTasks = this.state.tasks.filter(task => {\n        return task.status === \"completed\";\n      });\n\n\n      return (\n        <div className=\"App\">\n\n          <div className=\"container\">\n\n            <div className=\"row\">\n              <div className=\"col-2 col-sm-2 edge\">\n                <div style={{ height: \"100vh\" }}> </div>\n              </div>\n\n              <div className=\"col-8 col-sm-8\">\n\n                <Header />\n\n                <InputTask className=\"inputtask\" inputTaskFunc={this.inputNewTask} />\n                <TaskCount number={liveTasks.length} />\n\n                <p>Current Tasks</p>\n\n                {liveTasks.map(task => {\n                  return (\n                    <Task\n                      deleteTaskFunc={this.deleteTask}\n                      markTaskDoneFunc={this.markDone}\n                      status={task.status}\n                      dueDate={task.due_date}\n                      id={task.id}\n                      text={task.description}\n                    />\n                  );\n                })}\n\n                <scan id=\"completed\" > </scan>\n                <p >Completed Tasks</p>\n                {completedTasks.map(task => {\n                  return (\n                    <Task\n                      deleteTaskFunc={this.deleteTask}\n                      status={task.status}\n                      id={task.id}\n                      text={task.description}\n                    />\n                  );\n                })}\n\n\n\n              </div>\n              <div className=\"col-2 col-sm-2 edge\">\n                <div> </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}